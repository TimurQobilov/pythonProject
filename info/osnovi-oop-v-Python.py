# ### Наследование
# Наследование — это механизм объектно-ориентированного программирования (ООП), который позволяет одному классу (дочернему) наследовать атрибуты и методы другого класса (родительского).
# Это позволяет повторно использовать код и расширять функциональность классов, не переписывая его. В Python наследование осуществляется с помощью ключевого слова `class ChildClass(ParentClass)`.
#
# ### Инкапсуляция
# Инкапсуляция — это концепция, которая ограничивает доступ к внутренним данным и методам объекта. В Python, инкапсуляция реализована с помощью приватных (начинающихся с двух подчеркиваний)
# и защищенных (начинающихся с одного подчеркивания) атрибутов, что предотвращает прямой доступ к ним из внешнего кода, но доступ возможен через геттеры и сеттеры.
#
# ### Полиморфизм
# Полиморфизм — это способность объектов разных классов иметь методы с одинаковыми именами, которые могут вызываться одинаковым образом. В Python это реализовано через переопределение методов
# в дочерних классах. Это позволяет использовать один и тот же метод для объектов разных классов, при этом они будут вести себя по-разному в зависимости от класса.
#
# ### Метод `property`
# Метод `property` в Python используется для создания геттеров и сеттеров, которые позволяют контролировать доступ к атрибутам класса. Он позволяет обращаться к методам как к атрибутам объекта,
# что делает код более читаемым и упрощает контроль за изменением данных.
#
# Пример:
# ```python
class Car:
    def __init__(self, brand):
        self._brand = brand

    @property
    def brand(self):
        return self._brand

    @brand.setter
    def brand(self, value):
        if not value:
            raise ValueError("Brand cannot be empty")
        self._brand = value
# ```
#
# ### Метод `classmethod`
# Метод `classmethod` позволяет создавать методы, которые работают с самим классом, а не с экземплярами класса. Такие методы принимают первым аргументом не экземпляр (`self`), а сам класс (`cls`). Это удобно, например, для создания альтернативных конструкторов.
#
# Пример:
# ```python
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    @classmethod
    def from_string(cls, car_str):
        brand, model = car_str.split('-')
        return cls(brand, model)
# ```
#
# Этот метод полезен, когда нужно создать объект на основе другой информации, например строки или данных.