# ### Основы языка
#
# **Переменные и типы данных:**
#
# 1. **Какие основные типы данных есть в Python? Приведите примеры.**
#    - Основные типы данных:
#      - `int` (целые числа): `x = 5`
#      - `float` (числа с плавающей точкой): `x = 5.7`
#      - `str` (строки): `x = "Hello"`
#      - `bool` (логический тип): `x = True`
#      - `list` (список): `x = [1, 2, 3]`
#      - `dict` (словарь): `x = {"name": "John", "age": 30}`
#
# 2. **Как объявить переменную в Python?**
#    - Переменные в Python объявляются автоматически при присвоении значения: `x = 10`
#
# 3. **Как изменить тип данных переменной?**
#    - Для изменения типа данных используют встроенные функции преобразования: `int()`, `float()`, `str()`, например: `x = int("123")`
#
# **Операторы:**
#
# 1. **Какие арифметические операторы вы знаете?**
#    - `+` (сложение), `-` (вычитание), `*` (умножение), `/` (деление), `%` (остаток от деления), `**` (возведение в степень), `//` (целочисленное деление).
#
# 2. **Что делают операторы присваивания?**
#    - Операторы присваивания присваивают значение переменной. Пример: `=` (простое присваивание), `+=`, `-=`, `*=`, `/=` (сокращенные операторы присваивания).
#
# 3. **Какие логические операторы используются в Python?**
#    - `and`, `or`, `not` — операторы, используемые для логических операций.
#
# 4. **Для чего нужны операторы сравнения?**
#    - Операторы сравнения используются для проверки равенства или неравенства значений: `==`, `!=`, `<`, `>`, `<=`, `>=`.
#
# **Условные конструкции:**
#
# 1. **Как работает оператор `if`?**
#    - Оператор `if` проверяет условие, и если оно истинно, выполняется блок кода. Пример:
#      ```python
     if x > 0:
         print("x положительное")
#      ```
#
# #2. **Что такое `else` и `elif`? Приведите примеры.**
#    - `else` выполняется, если условие в `if` ложно. `elif` позволяет добавить несколько условий:
#      ```python
     if x > 0:
         print("x положительное")
     elif x == 0:
         print("x равно нулю")
     else:
         print("x отрицательное")
#      ```
#
# 3. **Как использовать вложенные условия?**
#    - Вложенные условия — это условия внутри других условий:
#      ```python
     if x > 0:
         if y > 0:
             print("Оба положительные")
#      ```
#
# **Циклы:**
#
# 1. **Какие типы циклов есть в Python?**
#    - Основные типы циклов: `for` и `while`.
#
# 2. **Как работает цикл `while`?**
#    - Цикл `while` выполняется до тех пор, пока условие истинно:
#      ```python
     while x < 5:
         print(x)
         x += 1
#      ```
#
# 3. **Как работает цикл `for`?**
#    - Цикл `for` перебирает элементы в последовательности:
#      ```python
     for i in range(5):
         print(i)
#      ```
#
# **Функции:**
#
# 1. **Что такое функция?**
#    - Функция — это блок кода, который выполняет определенную задачу и может быть вызван из других частей программы.
#
# 2. **Как определить функцию в Python?**
#    - Для определения функции используют ключевое слово `def`:
#      ```python
     def my_function():
         print("Hello")
#      ```
#
# 3. **Что такое аргументы функции?**
#    - Аргументы — это значения, которые передаются функции для обработки:
#      ```python
     def greet(name):
         print(f"Привет, {name}")
#      ```
#
# 4. **Что такое возвращаемое значение функции?**
#    - Функция может возвращать результат с помощью ключевого слова `return`:
#      ```python
     def add(x, y):
         return x + y
#      ```
#
# **Списки:**
#
# 1. **Как создать список?**
#    - Списки создаются с помощью квадратных скобок: `my_list = [1, 2, 3]`
#
# 2. **Как обратиться к элементу списка?**
#    - Доступ к элементу списка осуществляется по индексу: `my_list[0]`
#
# 3. **Как добавить элемент в список?**
#    - Используйте метод `append()`: `my_list.append(4)`
#
# 4. **Как удалить элемент из списка?**
#    - Для удаления элемента используется метод `remove()` или `del`: `my_list.remove(2)` или `del my_list[0]`
#
# 5. **Какие операции можно выполнять со списками?**
#    - Со списками можно выполнять операции срезов, объединения, сортировки, итерации и др.
#
# **Словари:**
#
# 1. **Что такое словарь?**
#    - Словарь — это коллекция пар ключ-значение: `my_dict = {"name": "John", "age": 30}`
#
# 2. **Как создать словарь?**
#    - Словарь создается с помощью фигурных скобок: `my_dict = {}`
#
# 3. **Как обратиться к значению по ключу?**
#    - Доступ осуществляется по ключу: `my_dict["name"]`
#
# 4. **Как добавить элемент в словарь?**
#    - Элемент добавляется присваиванием: `my_dict["job"] = "Engineer"`
#
# 5. **Как удалить элемент из словаря?**
#    - Используйте метод `del` или `pop()`: `del my_dict["age"]` или `my_dict.pop("age")`
#
# ### Более продвинутые темы
#
# **Строки:**
#
# 1. **Как работать со строками?**
#    - Строки можно объединять с помощью `+`, использовать методы для обработки: `upper()`, `lower()`, `strip()`, `replace()` и др.
#
# 2. **Какие методы для работы со строками вы знаете?**
#    - Основные методы: `split()`, `join()`, `find()`, `replace()`, `startswith()`, `endswith()`.
#
# 3. **Что такое форматирование строк?**
#    - Форматирование строк позволяет вставлять значения в строки. Примеры:
#      ```python
#      name = "John"
#      print(f"Привет, {name}")
#      ```
#
# **Модули:**
#
# 1. **Что такое модуль?**
#    - Модуль — это файл с Python кодом, содержащий функции и классы, которые можно использовать в других программах.
#
# 2. **Как импортировать модуль?**
#    - Для импорта модуля используется `import`: `import math`
#
# 3. **Какие стандартные модули Python вы знаете?**
#    - Примеры стандартных модулей: `math`, `datetime`, `os`, `sys`, `random`.
#
# **Классы и объекты:**
#
# 1. **Что такое класс и объект?**
#    - Класс — это шаблон для создания объектов. Объект — это экземпляр класса.
#
# 2. **Как создать класс?**
#    - Классы создаются с помощью ключевого слова `class`:
#      ```python
#      class MyClass:
#          pass
#      ```
#
# 3. **Что такое методы класса?**
#    - Методы — это функции, определенные внутри класса, которые работают с его объектами.
#
# 4. **Что такое атрибуты класса?**
#    - Атрибуты — это переменные, принадлежащие классу или объекту, которые содержат информацию о состоянии объекта.
#
# 5. **Что такое наследование?**
#    - Наследование позволяет одному классу наследовать атрибуты и методы другого класса:
#      ```python
#      class ChildClass(ParentClass):
#          pass
#      ```